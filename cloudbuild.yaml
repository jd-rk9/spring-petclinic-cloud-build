# This Cloud Build configuration file clones a Git repository,
# builds a container image using the Spring Boot Maven plugin,
# and pushes the image to Google Container Registry.

steps:
  # Step 1: Clone the specified Git repository.
  # We use the official git cloud builder for this.
  - name: 'gcr.io/cloud-builders/git'
    args: ['clone', 'https://github.com/spring-projects/spring-petclinic.git']
    id: 'clone-repo'

  # Step 2: Build the container image and push it to Container Registry.
  # We use a Maven builder image which has Java and Maven pre-installed.
  # The command 'spring-boot:build-image' uses Cloud Native Buildpacks
  # to create a container image without needing a Dockerfile.
  #
  # The '-Dspring-boot.build-image.imageName' flag sets the name and tag for the image.
  # We use the $PROJECT_ID substitution to automatically target the current project's
  # Container Registry.
  #
  # NOTE: The Spring Boot build-image goal requires the Docker daemon to be running.
  # Cloud Build runs each step with access to a Docker daemon, so this works out of the box.
  # We explicitly set the entrypoint to 'mvn' to bypass the container's default
  # entrypoint script which was causing issues with argument parsing.
  - name: 'maven:3.8.5-openjdk-17' # A container image with Maven and JDK 17
    entrypoint: 'mvn'
    args:
      - '-f'
      - 'spring-petclinic/pom.xml'
      - 'spring-boot:build-image'
      - '-Dspring-boot.build-image.imageName=gcr.io/${PROJECT_ID}/spring-petclinic'
      - '-Dmaven.test.skip=true' # Skip running the tests
    id: 'build-and-push-image'


# This section specifies the image(s) that will be created by this build.
# Cloud Build can use this to show the image name in the build results.
images:
  - 'gcr.io/${PROJECT_ID}/spring-petclinic'
options:
  logging: CLOUD_LOGGING_ONLY
